name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Python dependencies
        run: |
          pip install -r scripts/requirements.txt
          pip install pylint black isort

      - name: Install Node.js dependencies
        run: |
          cd app-node
          npm install

      - name: Install Go dependencies
        run: |
          cd app-go
          go mod tidy

      - name: Run Python linting
        run: |
          pylint scripts/*.py
          black --check scripts/
          isort --check-only scripts/

      - name: Run Node.js linting
        run: |
          cd app-node
          npm run lint || echo "Linting not configured"

      - name: Run Go linting
        run: |
          cd app-go
          golangci-lint run

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r scripts/ -f json -o bandit-report.json || true

  # Unit Tests
  test:
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          pip install -r scripts/requirements.txt
          cd app-node && npm install
          cd app-go && go mod tidy

      - name: Run Python tests
        run: |
          python -m pytest tests/ || echo "No tests found"

      - name: Run Node.js tests
        run: |
          cd app-node
          npm test || echo "No tests configured"

      - name: Run Go tests
        run: |
          cd app-go
          go test ./... -v

  # Build and Push Images
  build:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Node.js app
        uses: docker/build-push-action@v5
        with:
          context: ./app-node
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/product-creator:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Go app
        uses: docker/build-push-action@v5
        with:
          context: ./app-go
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/product-reader:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          docker-compose version

      - name: Start MongoDB infrastructure
        run: |
          cd mongo
          docker-compose up -d
          sleep 30

      - name: Run integration tests
        run: |
          cd scripts
          python init_mongo_servers.py
          python create_app_user.py
          python check_replicaset_status.py

      - name: Test applications
        run: |
          cd app-node
          node create_product.js
          cd ../app-go
          timeout 30s go run read_products.go || true

      - name: Cleanup
        if: always()
        run: |
          cd mongo
          docker-compose down

  # Deployment
  deploy:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deployment to production would happen here"
          echo "This could include:"
          echo "- Kubernetes deployment"
          echo "- Docker Swarm deployment"
          echo "- Cloud platform deployment"
          echo "- Infrastructure as Code execution" 