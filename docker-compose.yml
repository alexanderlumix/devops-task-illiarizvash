version: '3.8'

services:
  # MongoDB Replica Set
  mongo-0:
    image: mongo:6.0
    container_name: mongo-0
    ports:
      - "27030:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ADMIN_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ADMIN_PASSWORD:-mongo-1}
    volumes:
      - mongo-0-data:/data/db
      - ./mongo/mongo-keyfile:/etc/mongo-keyfile
    command: mongod --replSet rs0 --bind_ip_all --keyFile /etc/mongo-keyfile
    networks:
      - mongo-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongo-1:
    image: mongo:6.0
    container_name: mongo-1
    ports:
      - "27031:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ADMIN_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ADMIN_PASSWORD:-mongo-1}
    volumes:
      - mongo-1-data:/data/db
      - ./mongo/mongo-keyfile:/etc/mongo-keyfile
    command: mongod --replSet rs0 --bind_ip_all --keyFile /etc/mongo-keyfile
    networks:
      - mongo-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongo-2:
    image: mongo:6.0
    container_name: mongo-2
    ports:
      - "27032:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ADMIN_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ADMIN_PASSWORD:-mongo-1}
    volumes:
      - mongo-2-data:/data/db
      - ./mongo/mongo-keyfile:/etc/mongo-keyfile
    command: mongod --replSet rs0 --bind_ip_all --keyFile /etc/mongo-keyfile
    networks:
      - mongo-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HAProxy Load Balancer
  haproxy:
    image: haproxy:2.4
    container_name: haproxy
    ports:
      - "27034:27017"
    volumes:
      - ./mongo/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      - mongo-0
      - mongo-1
      - mongo-2
    networks:
      - mongo-network
    healthcheck:
      test: ["CMD", "haproxy", "-c", "-f", "/usr/local/etc/haproxy/haproxy.cfg"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go Application
  app-go:
    build: ./app-go
    container_name: app-go
    environment:
      - MONGO_USER=${APP_DB_USER:-appuser}
      - MONGO_PASSWORD=${APP_DB_PASSWORD:-appuserpassword}
      - MONGO_HOST=haproxy
      - MONGO_PORT=27017
      - MONGO_DB=${MONGO_DB:-appdb}
      - MONGO_REPLICA_SET=${MONGO_REPLICA_SET:-rs0}
    depends_on:
      - haproxy
    networks:
      - mongo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js Application
  app-node:
    build: ./app-node
    container_name: app-node
    environment:
      - MONGO_USER=${APP_DB_USER:-appuser}
      - MONGO_PASSWORD=${APP_DB_PASSWORD:-appuserpassword}
      - MONGO_HOST=haproxy
      - MONGO_PORT=27017
      - MONGO_DB=${MONGO_DB:-appdb}
      - MONGO_DIRECT_CONNECTION=${MONGO_DIRECT_CONNECTION:-true}
    depends_on:
      - haproxy
    networks:
      - mongo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongo-0-data:
  mongo-1-data:
  mongo-2-data:

networks:
  mongo-network:
    driver: bridge 